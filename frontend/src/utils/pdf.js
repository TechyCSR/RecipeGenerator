import jsPDF from 'jspdf';
import 'jspdf-autotable';

// Generate PDF for a recipe
export function generateRecipePDF(recipe) {
  const doc = new jsPDF();
  
  // Set up fonts and colors
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(20);
  doc.setTextColor(34, 139, 34); // Forest green
  
  // Title
  doc.text(recipe.title, 20, 30);
  
  // Recipe image (if available)
  if (recipe.image) {
    try {
      doc.addImage(recipe.image, 'JPEG', 20, 40, 60, 40);
    } catch (error) {
      console.error('Could not add image to PDF:', error);
    }
  }
  
  // Basic info
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(12);
  doc.setTextColor(0, 0, 0);
  
  let yPos = recipe.image ? 90 : 50;
  
  if (recipe.readyInMinutes) {
    doc.text(`Prep Time: ${recipe.readyInMinutes} minutes`, 20, yPos);
    yPos += 10;
  }
  
  if (recipe.servings) {
    doc.text(`Servings: ${recipe.servings}`, 20, yPos);
    yPos += 10;
  }
  
  if (recipe.cuisines && recipe.cuisines.length > 0) {
    doc.text(`Cuisine: ${recipe.cuisines.join(', ')}`, 20, yPos);
    yPos += 10;
  }
  
  yPos += 10;
  
  // Ingredients
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(16);
  doc.setTextColor(34, 139, 34);
  doc.text('Ingredients:', 20, yPos);
  yPos += 10;
  
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(11);
  doc.setTextColor(0, 0, 0);
  
  const ingredients = recipe.extendedIngredients || recipe.ingredients || [];
  ingredients.forEach((ingredient, index) => {
    const text = ingredient.original || ingredient.name || ingredient;
    doc.text(`• ${text}`, 25, yPos);
    yPos += 7;
    
    // Add new page if needed
    if (yPos > 270) {
      doc.addPage();
      yPos = 20;
    }
  });
  
  yPos += 10;
  
  // Instructions
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(16);
  doc.setTextColor(34, 139, 34);
  doc.text('Instructions:', 20, yPos);
  yPos += 10;
  
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(11);
  doc.setTextColor(0, 0, 0);
  
  const instructions = recipe.analyzedInstructions?.[0]?.steps || recipe.instructions || [];
  instructions.forEach((step, index) => {
    const text = step.step || step;
    const stepNumber = `${index + 1}. `;
    
    // Split long text into multiple lines
    const lines = doc.splitTextToSize(text, 160);
    
    // Add new page if needed
    if (yPos + (lines.length * 7) > 270) {
      doc.addPage();
      yPos = 20;
    }
    
    doc.text(stepNumber, 25, yPos);
    doc.text(lines, 35, yPos);
    yPos += lines.length * 7 + 5;
  });
  
  // Nutrition info (if available)
  if (recipe.nutrition) {
    yPos += 10;
    
    // Add new page if needed
    if (yPos > 240) {
      doc.addPage();
      yPos = 20;
    }
    
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(16);
    doc.setTextColor(34, 139, 34);
    doc.text('Nutrition Information:', 20, yPos);
    yPos += 10;
    
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(11);
    doc.setTextColor(0, 0, 0);
    
    const nutrition = recipe.nutrition.nutrients || [];
    nutrition.slice(0, 8).forEach(nutrient => {
      doc.text(`${nutrient.name}: ${nutrient.amount}${nutrient.unit}`, 25, yPos);
      yPos += 7;
    });
  }
  
  // Footer
  doc.setFontSize(8);
  doc.setTextColor(128, 128, 128);
  doc.text('Generated by RecipeGenius', 20, 285);
  doc.text(new Date().toLocaleDateString(), 150, 285);
  
  // Save the PDF
  doc.save(`${recipe.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_recipe.pdf`);
}

// Generate PDF for grocery list
export function generateGroceryListPDF(groceryList) {
  const doc = new jsPDF();
  
  // Title
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(20);
  doc.setTextColor(34, 139, 34);
  doc.text('Grocery List', 20, 30);
  
  // Date
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(12);
  doc.setTextColor(0, 0, 0);
  doc.text(`Created: ${new Date().toLocaleDateString()}`, 20, 45);
  
  // Items table
  const tableData = groceryList.items.map(item => [
    item.name,
    item.quantity || '1',
    item.unit || '',
    item.category || 'Other',
    item.completed ? '✓' : '☐'
  ]);
  
  doc.autoTable({
    startY: 60,
    head: [['Item', 'Quantity', 'Unit', 'Category', 'Done']],
    body: tableData,
    theme: 'striped',
    headStyles: {
      fillColor: [34, 139, 34],
      textColor: [255, 255, 255],
      fontStyle: 'bold'
    },
    styles: {
      fontSize: 11,
      cellPadding: 5
    },
    alternateRowStyles: {
      fillColor: [245, 245, 245]
    }
  });
  
  // Summary
  const finalY = doc.lastAutoTable.finalY || 60;
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(12);
  doc.text(`Total Items: ${groceryList.items.length}`, 20, finalY + 20);
  doc.text(`Completed: ${groceryList.items.filter(item => item.completed).length}`, 20, finalY + 35);
  
  // Footer
  doc.setFontSize(8);
  doc.setTextColor(128, 128, 128);
  doc.text('Generated by RecipeGenius', 20, 285);
  doc.text(new Date().toLocaleDateString(), 150, 285);
  
  // Save the PDF
  doc.save(`grocery_list_${new Date().toISOString().split('T')[0]}.pdf`);
}

// Generate PDF for pantry inventory
export function generatePantryInventoryPDF(pantryItems) {
  const doc = new jsPDF();
  
  // Title
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(20);
  doc.setTextColor(34, 139, 34);
  doc.text('Pantry Inventory', 20, 30);
  
  // Date
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(12);
  doc.setTextColor(0, 0, 0);
  doc.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 45);
  
  // Sort items by expiration date
  const sortedItems = [...pantryItems].sort((a, b) => {
    if (!a.expirationDate && !b.expirationDate) return 0;
    if (!a.expirationDate) return 1;
    if (!b.expirationDate) return -1;
    return new Date(a.expirationDate) - new Date(b.expirationDate);
  });
  
  // Items table
  const tableData = sortedItems.map(item => {
    const expirationDate = item.expirationDate ? 
      new Date(item.expirationDate).toLocaleDateString() : 'N/A';
    
    const status = item.expirationDate ? 
      (new Date(item.expirationDate) < new Date() ? 'Expired' : 
       new Date(item.expirationDate) < new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) ? 'Expiring Soon' : 'Fresh') : 'N/A';
    
    return [
      item.name,
      item.quantity || '1',
      item.unit || '',
      item.category || 'Other',
      expirationDate,
      status
    ];
  });
  
  doc.autoTable({
    startY: 60,
    head: [['Item', 'Quantity', 'Unit', 'Category', 'Expiration', 'Status']],
    body: tableData,
    theme: 'striped',
    headStyles: {
      fillColor: [34, 139, 34],
      textColor: [255, 255, 255],
      fontStyle: 'bold'
    },
    styles: {
      fontSize: 10,
      cellPadding: 4
    },
    alternateRowStyles: {
      fillColor: [245, 245, 245]
    },
    columnStyles: {
      0: { cellWidth: 35 },
      1: { cellWidth: 20 },
      2: { cellWidth: 20 },
      3: { cellWidth: 25 },
      4: { cellWidth: 25 },
      5: { cellWidth: 30 }
    }
  });
  
  // Summary
  const finalY = doc.lastAutoTable.finalY || 60;
  const expiredCount = pantryItems.filter(item => 
    item.expirationDate && new Date(item.expirationDate) < new Date()
  ).length;
  
  const expiringSoonCount = pantryItems.filter(item => 
    item.expirationDate && 
    new Date(item.expirationDate) >= new Date() &&
    new Date(item.expirationDate) < new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
  ).length;
  
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(12);
  doc.text(`Total Items: ${pantryItems.length}`, 20, finalY + 20);
  doc.text(`Expired Items: ${expiredCount}`, 20, finalY + 35);
  doc.text(`Expiring Soon: ${expiringSoonCount}`, 20, finalY + 50);
  
  // Footer
  doc.setFontSize(8);
  doc.setTextColor(128, 128, 128);
  doc.text('Generated by RecipeGenius', 20, 285);
  doc.text(new Date().toLocaleDateString(), 150, 285);
  
  // Save the PDF
  doc.save(`pantry_inventory_${new Date().toISOString().split('T')[0]}.pdf`);
}

// Generate PDF for meal plan
export function generateMealPlanPDF(mealPlan) {
  const doc = new jsPDF();
  
  // Title
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(20);
  doc.setTextColor(34, 139, 34);
  doc.text('Weekly Meal Plan', 20, 30);
  
  // Date range
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(12);
  doc.setTextColor(0, 0, 0);
  doc.text(`Week of ${mealPlan.startDate} - ${mealPlan.endDate}`, 20, 45);
  
  let yPos = 65;
  
  // Days of the week
  const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
  
  days.forEach(day => {
    const dayMeals = mealPlan.meals[day.toLowerCase()] || {};
    
    // Day header
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(14);
    doc.setTextColor(34, 139, 34);
    doc.text(day, 20, yPos);
    yPos += 15;
    
    // Meals for the day
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(11);
    doc.setTextColor(0, 0, 0);
    
    ['breakfast', 'lunch', 'dinner'].forEach(mealType => {
      if (dayMeals[mealType]) {
        const mealName = mealType.charAt(0).toUpperCase() + mealType.slice(1);
        doc.text(`${mealName}: ${dayMeals[mealType].title}`, 25, yPos);
        yPos += 8;
      }
    });
    
    yPos += 10;
    
    // Add new page if needed
    if (yPos > 250) {
      doc.addPage();
      yPos = 20;
    }
  });
  
  // Shopping list (if available)
  if (mealPlan.shoppingList && mealPlan.shoppingList.length > 0) {
    yPos += 10;
    
    // Add new page if needed
    if (yPos > 200) {
      doc.addPage();
      yPos = 20;
    }
    
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(16);
    doc.setTextColor(34, 139, 34);
    doc.text('Shopping List:', 20, yPos);
    yPos += 15;
    
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(11);
    doc.setTextColor(0, 0, 0);
    
    mealPlan.shoppingList.forEach(item => {
      doc.text(`• ${item}`, 25, yPos);
      yPos += 7;
      
      // Add new page if needed
      if (yPos > 270) {
        doc.addPage();
        yPos = 20;
      }
    });
  }
  
  // Footer
  doc.setFontSize(8);
  doc.setTextColor(128, 128, 128);
  doc.text('Generated by RecipeGenius', 20, 285);
  doc.text(new Date().toLocaleDateString(), 150, 285);
  
  // Save the PDF
  doc.save(`meal_plan_${new Date().toISOString().split('T')[0]}.pdf`);
}

// Utility function to format recipe for sharing
export function formatRecipeForSharing(recipe) {
  let text = `${recipe.title}\n\n`;
  
  if (recipe.readyInMinutes) {
    text += `Prep Time: ${recipe.readyInMinutes} minutes\n`;
  }
  
  if (recipe.servings) {
    text += `Servings: ${recipe.servings}\n`;
  }
  
  text += '\nIngredients:\n';
  const ingredients = recipe.extendedIngredients || recipe.ingredients || [];
  ingredients.forEach(ingredient => {
    const ingredientText = ingredient.original || ingredient.name || ingredient;
    text += `• ${ingredientText}\n`;
  });
  
  text += '\nInstructions:\n';
  const instructions = recipe.analyzedInstructions?.[0]?.steps || recipe.instructions || [];
  instructions.forEach((step, index) => {
    const stepText = step.step || step;
    text += `${index + 1}. ${stepText}\n`;
  });
  
  return text;
}
